module(
    name = "cuda_learning",
    version = "1.0.0",
)

# CUDA rules from bazel-contrib (v0.2.5)
bazel_dep(name = "rules_cuda", version = "0.2.1")

# Override to use the latest release (v0.2.5)
archive_override(
    module_name = "rules_cuda",
    integrity = "sha256-/o09jtUrm0M/iQIbA+PEKKguEO2QxygIzEmI0fS50bM=",
    strip_prefix = "rules_cuda-v0.2.5",
    urls = ["https://github.com/bazel-contrib/rules_cuda/releases/download/v0.2.5/rules_cuda-v0.2.5.tar.gz"],
)

# Google Test for unit testing
bazel_dep(name = "googletest", version = "1.15.2")

# C++ rules
bazel_dep(name = "rules_cc", version = "0.0.10")

# Protocol Buffers for CGO integration
bazel_dep(name = "protobuf", version = "29.0")
bazel_dep(name = "rules_proto", version = "7.0.2")
bazel_dep(name = "rules_buf", version = "0.3.0")

# Go rules for web server
bazel_dep(name = "rules_go", version = "0.51.0")
bazel_dep(name = "gazelle", version = "0.40.0")

# Configure Go SDK to use Go 1.24+
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.24.0")
use_repo(go_sdk, "go_toolchains")

# OCI (Docker) rules for containerization
bazel_dep(name = "rules_oci", version = "2.0.0")
bazel_dep(name = "rules_pkg", version = "1.0.1")

# Lyra CLI parser library (header-only)
http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "lyra",
    build_file_content = """
cc_library(
    name = "lyra",
    hdrs = glob(["include/**/*.hpp"]),
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
)
""",
    sha256 = "a93f247ed89eba11ca36eb24c4f8ba7be636bf24e74aaaa8e1066e0954bec7e3",
    strip_prefix = "Lyra-1.6.1",
    urls = ["https://github.com/bfgroup/Lyra/archive/refs/tags/1.6.1.tar.gz"],
)

# spdlog logging library
http_archive(
    name = "spdlog",
    build_file_content = """
cc_library(
    name = "spdlog",
    hdrs = glob(["include/**/*.h"]),
    srcs = glob(["src/*.cpp"]),
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
    defines = ["SPDLOG_COMPILED_LIB"],
)
""",
    sha256 = "4dccf2d10f410c1e2feaff89966bfc49a1abb29ef6f08246335b110e001e09a9",
    strip_prefix = "spdlog-1.12.0",
    urls = ["https://github.com/gabime/spdlog/archive/refs/tags/v1.12.0.tar.gz"],
)

bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    commit = "4f28899228fb3ad0126897876f147ca15026151e",  # Ãšltimo commit estable
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
)

# Go dependencies
go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
go_deps.module(
    path = "github.com/gorilla/websocket",
    sum = "h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=",
    version = "v1.5.3",
)
go_deps.module(
    path = "google.golang.org/protobuf",
    sum = "h1:AYd7cD/uASjIL6Q9LiTjz8JLcrh/88q5UObnmY3aOOE=",
    version = "v1.36.10",
)
go_deps.module(
    path = "connectrpc.com/connect",
    sum = "h1:W0ZqMhtVzn9Zhn2yATuUokDLO5N+gIuBWMOnsQrfmZk=",
    version = "v1.17.0",
)
go_deps.module(
    path = "google.golang.org/genproto/googleapis/api",
    sum = "h1:8Zg5TdmcbU8A7CXGjGXF1Slqu/nIFCRaR3S5gT2plIA=",
    version = "v0.0.0-20251007200510-49b9836ed3ff",
)
use_repo(
    go_deps,
    "com_connectrpc_connect",
    "com_github_gorilla_websocket",
    "com_github_spf13_viper",
    "io_flipt_go_flipt_client",
    "io_opentelemetry_go_contrib_instrumentation_net_http_otelhttp",
    "io_opentelemetry_go_otel",
    "io_opentelemetry_go_otel_exporters_otlp_otlptrace_otlptracegrpc",
    "io_opentelemetry_go_otel_sdk",
    "io_opentelemetry_go_otel_trace",
    "org_golang_google_genproto_googleapis_api",
    "org_golang_google_grpc",
    "org_golang_google_protobuf",
)

# OCI base images for Docker
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_base",
    digest = "sha256:e9d0321de8927f69ce20e39bfc061343cce395996dfc1f0db6540e5145bc63a5",
    image = "gcr.io/distroless/base-debian12",
    platforms = ["linux/amd64"],
)
use_repo(oci, "distroless_base", "distroless_base_linux_amd64")
