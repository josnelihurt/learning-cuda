services:
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: jaeger-dev
    restart: unless-stopped
    
    ports:
      - "16686:16686"
      - "14250:14250"
    
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
    
    networks:
      - dev-network
    
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:14269/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    container_name: otel-collector-dev
    restart: unless-stopped
    
    command: ["--config=/etc/otel-collector-config.yaml"]
    
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    
    ports:
      - "4317:4317"
      - "4318:4318"
      - "13133:13133"
    
    networks:
      - dev-network
    
    depends_on:
      jaeger:
        condition: service_healthy

  flipt:
    image: flipt/flipt:latest
    container_name: flipt-dev
    restart: unless-stopped
    
    ports:
      - "8081:8080"
      - "9000:9000"
    
    volumes:
      - ./.ignore/storage/flipt:/var/opt/flipt
    
    environment:
      - FLIPT_LOG_LEVEL=info
      - FLIPT_DB_URL=file:/var/opt/flipt/flipt.db
      - FLIPT_META_TELEMETRY_ENABLED=false
    
    networks:
      - dev-network
    
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  loki:
    image: grafana/loki:2.9.3
    container_name: loki-dev
    restart: unless-stopped
    
    ports:
      - "3100:3100"
    
    command: -config.file=/etc/loki/loki-config.yaml
    
    volumes:
      - ./config/loki-config.yaml:/etc/loki/loki-config.yaml:ro
    
    networks:
      - dev-network
    
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  promtail:
    image: grafana/promtail:2.9.3
    container_name: promtail-dev
    restart: unless-stopped
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/promtail-config.yaml:/etc/promtail/config.yml:ro
    
    command: -config.file=/etc/promtail/config.yml
    
    depends_on:
      loki:
        condition: service_healthy
    
    networks:
      - dev-network

  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana-dev
    restart: unless-stopped
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    
    ports:
      - "3001:3000"
    
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=traceToLogs
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_PATHS_DATA=/tmp/grafana
    
    volumes:
      - ./config/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
      - ./config/grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./config/grafana-dashboard-logs.json:/etc/grafana/dashboards/logs.json:ro
    
    depends_on:
      loki:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    
    networks:
      - dev-network
    
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  integration-tests:
    build:
      context: .
      dockerfile: Dockerfile
      target: integration-tests
      args:
        USER_ID: ${USER_ID:-1000}
        GROUP_ID: ${GROUP_ID:-1000}
    container_name: integration-tests
    network_mode: host
    volumes:
      - ./integration/tests/acceptance/.ignore/test-results:/workspace/integration/tests/acceptance/.ignore/test-results
    profiles:
      - testing

  cucumber-report:
    image: node:18-alpine
    container_name: cucumber-report-viewer
    working_dir: /app
    ports:
      - "5050:8080"
    volumes:
      - ./integration/tests/acceptance/.ignore/test-results:/app/input:ro
      - ./integration/tests/acceptance/.ignore/reports:/app/output
    command: >
      sh -c "npm init -y &&
             npm install multiple-cucumber-html-reporter http-server && 
             node -e \"const report = require('multiple-cucumber-html-reporter'); report.generate({ jsonDir: '/app/input', reportPath: '/app/output', displayDuration: true, displayReportTime: true, pageTitle: 'Feature Flags BDD Tests', reportName: 'CUDA Learning - Integration Tests', metadata: { browser: { name: 'API Tests', version: '1.0' }, platform: { name: 'Docker', version: 'latest' } } }); console.log('Report generated!');\" && 
             echo 'Starting HTTP server on port 8080...' &&
             npx http-server /app/output -p 8080"
    networks:
      - dev-network
    profiles:
      - testing

networks:
  dev-network:
    driver: bridge

