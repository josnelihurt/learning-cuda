services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cuda-image-processor
    restart: unless-stopped
    
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu, compute, utility]
    
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility,graphics
    
    volumes:
      - ./data:/data:ro
    
    expose:
      - "8080"
    
    networks:
      - traefik
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cuda-app.rule=PathPrefix(`/`)"
      - "traefik.http.routers.cuda-app.entrypoints=websecure"
      - "traefik.http.routers.cuda-app.tls=true"
      - "traefik.http.services.cuda-app.loadbalancer.server.port=8080"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/config/traefik-config.yml"
      - "--providers.file.watch=true"
      - "--entrypoints.websecure.address=:443"
      - "--log.level=INFO"
    
    ports:
      - "443:443"
      - "8081:8080"
    
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./.secrets:/certs:ro"
      - "./traefik-config.yml:/config/traefik-config.yml:ro"
    
    networks:
      - traefik
    
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: jaeger
    restart: unless-stopped
    
    ports:
      - "16686:16686"
    
    expose:
      - "4317"
      - "4318"
    
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    
    networks:
      - traefik
    
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:14269/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    restart: unless-stopped
    
    expose:
      - "3100"
    
    command: -config.file=/etc/loki/loki-config.yaml
    
    volumes:
      - ./config/loki-config.yaml:/etc/loki/loki-config.yaml:ro
    
    networks:
      - traefik
    
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  promtail:
    image: grafana/promtail:2.9.3
    container_name: promtail
    restart: unless-stopped
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/promtail-config.yaml:/etc/promtail/config.yml:ro
    
    command: -config.file=/etc/promtail/config.yml
    
    depends_on:
      loki:
        condition: service_healthy
    
    networks:
      - traefik

  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    restart: unless-stopped
    
    expose:
      - "3000"
    
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=traceToLogs
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_SERVER_ROOT_URL=https://localhost/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    
    volumes:
      - ./config/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
      - ./config/grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./config/grafana-dashboard-logs.json:/etc/grafana/dashboards/logs.json:ro
      - grafana-storage:/var/lib/grafana
    
    depends_on:
      loki:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    
    networks:
      - traefik
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.priority=100"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    container_name: otel-collector
    restart: unless-stopped
    
    command: ["--config=/etc/otel-collector-config.yaml"]
    
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    
    ports:
      - "4317:4317"
      - "4318:4318"
    
    networks:
      - traefik
    
    depends_on:
      jaeger:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:13133/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  flipt:
    image: flipt/flipt:latest
    container_name: flipt
    restart: unless-stopped
    
    expose:
      - "8080"
    
    volumes:
      - ./.ignore/storage/flipt:/var/opt/flipt
    
    environment:
      - FLIPT_LOG_LEVEL=info
      - FLIPT_DB_URL=file:/var/opt/flipt/flipt.db
      - FLIPT_META_TELEMETRY_ENABLED=false
    
    networks:
      - traefik
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flipt.rule=PathPrefix(`/flipt`)"
      - "traefik.http.routers.flipt.entrypoints=websecure"
      - "traefik.http.routers.flipt.tls=true"
      - "traefik.http.routers.flipt.priority=100"
      - "traefik.http.services.flipt.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.flipt-stripprefix.stripprefix.prefixes=/flipt"
      - "traefik.http.routers.flipt.middlewares=flipt-stripprefix"
    
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  test-reports:
    build:
      context: .
      dockerfile: Dockerfile
      target: test-reports
    image: cuda-learning-test-reports
    container_name: test-reports
    restart: unless-stopped
    
    expose:
      - "8080"
    
    command: npx http-server /app/reports -p 8080
    
    networks:
      - traefik
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.test-reports.rule=PathPrefix(`/reports`)"
      - "traefik.http.routers.test-reports.entrypoints=websecure"
      - "traefik.http.routers.test-reports.tls=true"
      - "traefik.http.routers.test-reports.priority=100"
      - "traefik.http.services.test-reports.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.test-reports-stripprefix.stripprefix.prefixes=/reports"
      - "traefik.http.routers.test-reports.middlewares=test-reports-stripprefix"

networks:
  traefik:
    driver: bridge

volumes:
  grafana-storage:

