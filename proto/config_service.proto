syntax = "proto3";

package cuda_learning;

import "common.proto";

option go_package = "github.com/jrb/cuda-learning/proto/gen";

// Stream configuration
message StreamEndpoint {
  string type = 1 [json_name = "type"];
  string endpoint = 3 [json_name = "endpoint"];
  string transport_format = 5 [json_name = "transport_format"];
}

message GetStreamConfigRequest {
  TraceContext trace_context = 1 [json_name = "trace_context"];
}

message GetStreamConfigResponse {
  repeated StreamEndpoint endpoints = 1 [json_name = "endpoints"];
  TraceContext trace_context = 3 [json_name = "trace_context"];
}

// Feature flags synchronization
message SyncFeatureFlagsRequest {
  TraceContext trace_context = 1 [json_name = "trace_context"];
}

message SyncFeatureFlagsResponse {
  string message = 1 [json_name = "message"];
  TraceContext trace_context = 3 [json_name = "trace_context"];
}

// Input sources configuration
message InputSource {
  string id = 1 [json_name = "id"];
  string display_name = 3 [json_name = "display_name"];
  string type = 5 [json_name = "type"];
  string image_path = 7 [json_name = "image_path"];
  bool is_default = 9 [json_name = "is_default"];
}

message ListInputsRequest {
  TraceContext trace_context = 1 [json_name = "trace_context"];
}

message ListInputsResponse {
  repeated InputSource sources = 1 [json_name = "sources"];
  TraceContext trace_context = 3 [json_name = "trace_context"];
}

// Available static images
message StaticImage {
  string id = 1 [json_name = "id"];
  string display_name = 3 [json_name = "display_name"];
  string path = 5 [json_name = "path"];
  bool is_default = 7 [json_name = "is_default"];
}

message ListAvailableImagesRequest {
  TraceContext trace_context = 1 [json_name = "trace_context"];
}

message ListAvailableImagesResponse {
  repeated StaticImage images = 1 [json_name = "images"];
  TraceContext trace_context = 3 [json_name = "trace_context"];
}

// Processor management
message GetProcessorStatusRequest {
  TraceContext trace_context = 1 [json_name = "trace_context"];
}

message GetProcessorStatusResponse {
  string current_library = 1 [json_name = "current_library"];
  string api_version = 3 [json_name = "api_version"];
  LibraryCapabilities capabilities = 5 [json_name = "capabilities"];
  repeated string available_libraries = 7 [json_name = "available_libraries"];
  TraceContext trace_context = 9 [json_name = "trace_context"];
}

message ReloadProcessorRequest {
  string version = 1 [json_name = "version"];
  TraceContext trace_context = 3 [json_name = "trace_context"];
}

message ReloadProcessorResponse {
  string status = 1 [json_name = "status"];
  string message = 3 [json_name = "message"];
  TraceContext trace_context = 5 [json_name = "trace_context"];
}

// Tools configuration
message Tool {
  string id = 1 [json_name = "id"];
  string name = 3 [json_name = "name"];
  string icon_path = 5 [json_name = "icon_path"];
  string type = 7 [json_name = "type"];
  string url = 9 [json_name = "url"];
  string action = 11 [json_name = "action"];
}

message ToolCategory {
  string id = 1 [json_name = "id"];
  string name = 3 [json_name = "name"];
  repeated Tool tools = 5 [json_name = "tools"];
}

message GetAvailableToolsRequest {
  TraceContext trace_context = 1 [json_name = "trace_context"];
}

message GetAvailableToolsResponse {
  repeated ToolCategory categories = 1 [json_name = "categories"];
  TraceContext trace_context = 3 [json_name = "trace_context"];
}

service ConfigService {
  rpc GetStreamConfig(GetStreamConfigRequest) returns (GetStreamConfigResponse);
  rpc SyncFeatureFlags(SyncFeatureFlagsRequest) returns (SyncFeatureFlagsResponse);
  rpc ListInputs(ListInputsRequest) returns (ListInputsResponse);
  rpc ListAvailableImages(ListAvailableImagesRequest) returns (ListAvailableImagesResponse);
  rpc GetProcessorStatus(GetProcessorStatusRequest) returns (GetProcessorStatusResponse);
  rpc ReloadProcessor(ReloadProcessorRequest) returns (ReloadProcessorResponse);
  rpc GetAvailableTools(GetAvailableToolsRequest) returns (GetAvailableToolsResponse);
}

