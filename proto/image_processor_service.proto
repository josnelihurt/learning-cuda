syntax = "proto3";

package cuda_learning;

import "common.proto";

option go_package = "github.com/jrb/cuda-learning/proto/gen";

// Request: Go passes raw image buffer
message ProcessImageRequest {
  bytes image_data = 1 [json_name = "image_data"];
  int32 width = 3 [json_name = "width"];
  int32 height = 5 [json_name = "height"];
  int32 channels = 7 [json_name = "channels"];
  repeated FilterType filters = 9 [json_name = "filters"];
  AcceleratorType accelerator = 11 [json_name = "accelerator"];
  GrayscaleType grayscale_type = 13 [json_name = "grayscale_type"];
  
  // OpenTelemetry trace context propagation (deprecated - use trace_context instead)
  string trace_id = 15 [json_name = "trace_id"];
  string span_id = 17 [json_name = "span_id"];
  uint32 trace_flags = 19 [json_name = "trace_flags"];
  
  TraceContext trace_context = 21 [json_name = "trace_context"];
  string api_version = 23 [json_name = "api_version"];
}

// Response: C++ returns processed image buffer
message ProcessImageResponse {
  int32 code = 1 [json_name = "code"];
  string message = 3 [json_name = "message"];
  bytes image_data = 5 [json_name = "image_data"];
  int32 width = 7 [json_name = "width"];
  int32 height = 9 [json_name = "height"];
  int32 channels = 11 [json_name = "channels"];
  TraceContext trace_context = 13 [json_name = "trace_context"];
  string api_version = 15 [json_name = "api_version"];
}

// Lifecycle management
message InitRequest {
  int32 cuda_device_id = 1;
  TraceContext trace_context = 3 [json_name = "trace_context"];
  string api_version = 5 [json_name = "api_version"];
}

message InitResponse {
  int32 code = 1;
  string message = 3;
  TraceContext trace_context = 5 [json_name = "trace_context"];
  string api_version = 7 [json_name = "api_version"];
}

// WebSocket stream messages
message WebSocketFrameRequest {
  string type = 1 [json_name = "type"];
  ProcessImageRequest request = 3 [json_name = "request"];
  StartVideoPlaybackRequest start_video_request = 4 [json_name = "startVideoRequest"];
  StopVideoPlaybackRequest stop_video_request = 6 [json_name = "stopVideoRequest"];
  TraceContext trace_context = 5 [json_name = "trace_context"];
}

message WebSocketFrameResponse {
  string type = 1 [json_name = "type"];
  bool success = 3 [json_name = "success"];
  string error = 5 [json_name = "error"];
  ProcessImageResponse response = 7 [json_name = "response"];
  TraceContext trace_context = 9 [json_name = "trace_context"];
  VideoFrameUpdate video_frame = 11 [json_name = "video_frame"];
}

message StartVideoPlaybackRequest {
  string video_id = 1 [json_name = "videoId"];
  repeated FilterType filters = 3 [json_name = "filters"];
  AcceleratorType accelerator = 5 [json_name = "accelerator"];
  GrayscaleType grayscale_type = 7 [json_name = "grayscaleType"];
  TraceContext trace_context = 9 [json_name = "trace_context"];
}

message StopVideoPlaybackRequest {
  string session_id = 1 [json_name = "sessionId"];
  TraceContext trace_context = 3 [json_name = "trace_context"];
}

message VideoFrameUpdate {
  string session_id = 1 [json_name = "session_id"];
  bytes frame_data = 3 [json_name = "frame_data"];
  int32 frame_number = 5 [json_name = "frame_number"];
  int64 timestamp_ms = 7 [json_name = "timestamp_ms"];
  bool is_last_frame = 9 [json_name = "is_last_frame"];
  int32 frame_id = 11 [json_name = "frame_id"];
}

// Capabilities query (internal use)
message GetCapabilitiesRequest {
  string api_version = 1 [json_name = "api_version"];
}

message GetCapabilitiesResponse {
  int32 code = 1 [json_name = "code"];
  string message = 3 [json_name = "message"];
  LibraryCapabilities capabilities = 5 [json_name = "capabilities"];
}

service ImageProcessorService {
  rpc ProcessImage(ProcessImageRequest) returns (ProcessImageResponse);
  rpc StreamProcessVideo(stream ProcessImageRequest) returns (stream ProcessImageResponse);
}

