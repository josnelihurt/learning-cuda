---
- name: Check if Docker is running
  systemd:
    name: docker
    state: started
  become: yes

- name: Check if Docker Compose is available
  command: docker compose version
  register: docker_compose_check
  failed_when: false
  changed_when: false

- name: Fail if Docker Compose is not available
  fail:
    msg: "Docker Compose is not available. Please install docker-compose-plugin."
  when: docker_compose_check.rc != 0

- name: Ensure buildx builder exists
  shell: |
    if ! docker buildx inspect cuda-builder &>/dev/null; then
      docker buildx create --name cuda-builder --driver docker-container --use
    else
      docker buildx use cuda-builder
    fi
  become_user: "{{ deployment_user }}"
  register: buildx_setup
  changed_when: "'cuda-builder' not in buildx_setup.stdout"

- name: Build Docker images with buildx
  shell: |
    cd {{ app_directory }}
    ARCH=$(uname -m)
    if [ "$ARCH" = "aarch64" ]; then
      PLATFORM="linux/arm64"
    elif [ "$ARCH" = "x86_64" ]; then
      PLATFORM="linux/amd64"
    else
      echo "Unsupported architecture: $ARCH"
      exit 1
    fi
    docker buildx build --platform "${PLATFORM}" --load -f Dockerfile -t cuda-learning-app:latest .
  become_user: "{{ deployment_user }}"
  register: build_result
  failed_when: build_result.rc != 0

- name: Stop existing containers
  shell: |
    cd {{ app_directory }}
    docker compose -f docker-compose.yml down
  become_user: "{{ deployment_user }}"
  register: stop_result
  failed_when: false
  changed_when: stop_result.rc == 0

- name: Start services with production profile
  shell: |
    cd {{ app_directory }}
    docker compose --profile production up -d
  become_user: "{{ deployment_user }}"
  register: start_result
  failed_when: start_result.rc != 0

- name: Wait for services to be ready
  wait_for:
    port: 8080
    host: "{{ ansible_host }}"
    timeout: 60
    delay: 10

- name: Check service health
  uri:
    url: "http://{{ ansible_host }}:8080/"
    method: GET
    status_code: 200
  register: health_check
  retries: 5
  delay: 10

- name: Display deployment status
  debug:
    msg:
      - "Docker images built successfully"
      - "Services started with production profile"
      - "Health check: {{ 'PASSED' if health_check.status == 200 else 'FAILED' }}"
      - "Application URL: http://{{ ansible_host }}:8080"
      - "Traefik Dashboard: http://{{ ansible_host }}:8081"
      - "Jaeger UI: http://{{ ansible_host }}:16686"
      - "Grafana: https://{{ ansible_host }}/grafana"
      - "Flipt: https://{{ ansible_host }}/flipt"
      - "Test Reports: https://{{ ansible_host }}/reports"
