// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file common.proto (package cuda_learning, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Enum for filter types
 *
 * @generated from enum cuda_learning.FilterType
 */
export enum FilterType {
  /**
   * @generated from enum value: FILTER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FILTER_TYPE_NONE = 1;
   */
  NONE = 1,

  /**
   * Future: FILTER_TYPE_BLUR = 5, FILTER_TYPE_EDGE_DETECT = 10, etc.
   *
   * @generated from enum value: FILTER_TYPE_GRAYSCALE = 2;
   */
  GRAYSCALE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(FilterType)
proto3.util.setEnumType(FilterType, "cuda_learning.FilterType", [
  { no: 0, name: "FILTER_TYPE_UNSPECIFIED" },
  { no: 1, name: "FILTER_TYPE_NONE" },
  { no: 2, name: "FILTER_TYPE_GRAYSCALE" },
]);

/**
 * Enum for accelerator types
 *
 * @generated from enum cuda_learning.AcceleratorType
 */
export enum AcceleratorType {
  /**
   * @generated from enum value: ACCELERATOR_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACCELERATOR_TYPE_GPU = 1;
   */
  GPU = 1,

  /**
   * @generated from enum value: ACCELERATOR_TYPE_CPU = 2;
   */
  CPU = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AcceleratorType)
proto3.util.setEnumType(AcceleratorType, "cuda_learning.AcceleratorType", [
  { no: 0, name: "ACCELERATOR_TYPE_UNSPECIFIED" },
  { no: 1, name: "ACCELERATOR_TYPE_GPU" },
  { no: 2, name: "ACCELERATOR_TYPE_CPU" },
]);

/**
 * Enum for grayscale conversion algorithms
 *
 * @generated from enum cuda_learning.GrayscaleType
 */
export enum GrayscaleType {
  /**
   * @generated from enum value: GRAYSCALE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ITU-R BT.601 (SDTV): Y = 0.299R + 0.587G + 0.114B
   *
   * @generated from enum value: GRAYSCALE_TYPE_BT601 = 1;
   */
  BT601 = 1,

  /**
   * ITU-R BT.709 (HDTV): Y = 0.2126R + 0.7152G + 0.0722B
   *
   * @generated from enum value: GRAYSCALE_TYPE_BT709 = 2;
   */
  BT709 = 2,

  /**
   * Simple average: Y = (R + G + B) / 3
   *
   * @generated from enum value: GRAYSCALE_TYPE_AVERAGE = 3;
   */
  AVERAGE = 3,

  /**
   * Lightness: Y = (max(R,G,B) + min(R,G,B)) / 2
   *
   * @generated from enum value: GRAYSCALE_TYPE_LIGHTNESS = 4;
   */
  LIGHTNESS = 4,

  /**
   * Luminosity: Y = 0.21R + 0.72G + 0.07B (similar to BT709)
   *
   * @generated from enum value: GRAYSCALE_TYPE_LUMINOSITY = 5;
   */
  LUMINOSITY = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(GrayscaleType)
proto3.util.setEnumType(GrayscaleType, "cuda_learning.GrayscaleType", [
  { no: 0, name: "GRAYSCALE_TYPE_UNSPECIFIED" },
  { no: 1, name: "GRAYSCALE_TYPE_BT601" },
  { no: 2, name: "GRAYSCALE_TYPE_BT709" },
  { no: 3, name: "GRAYSCALE_TYPE_AVERAGE" },
  { no: 4, name: "GRAYSCALE_TYPE_LIGHTNESS" },
  { no: 5, name: "GRAYSCALE_TYPE_LUMINOSITY" },
]);

/**
 * W3C Trace Context for distributed tracing
 *
 * @generated from message cuda_learning.TraceContext
 */
export class TraceContext extends Message<TraceContext> {
  /**
   * @generated from field: string traceparent = 1;
   */
  traceparent = "";

  /**
   * @generated from field: string tracestate = 3;
   */
  tracestate = "";

  constructor(data?: PartialMessage<TraceContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.TraceContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "traceparent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tracestate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TraceContext {
    return new TraceContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TraceContext {
    return new TraceContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TraceContext {
    return new TraceContext().fromJsonString(jsonString, options);
  }

  static equals(a: TraceContext | PlainMessage<TraceContext> | undefined, b: TraceContext | PlainMessage<TraceContext> | undefined): boolean {
    return proto3.util.equals(TraceContext, a, b);
  }
}

