// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file config_service.proto (package cuda_learning, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { LibraryCapabilities, TraceContext } from "./common_pb.js";

/**
 * Stream configuration
 *
 * @generated from message cuda_learning.StreamEndpoint
 */
export class StreamEndpoint extends Message<StreamEndpoint> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: string endpoint = 3;
   */
  endpoint = "";

  /**
   * @generated from field: string transport_format = 5 [json_name = "transport_format"];
   */
  transportFormat = "";

  constructor(data?: PartialMessage<StreamEndpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.StreamEndpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "transport_format", jsonName: "transport_format", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamEndpoint {
    return new StreamEndpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamEndpoint {
    return new StreamEndpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamEndpoint {
    return new StreamEndpoint().fromJsonString(jsonString, options);
  }

  static equals(a: StreamEndpoint | PlainMessage<StreamEndpoint> | undefined, b: StreamEndpoint | PlainMessage<StreamEndpoint> | undefined): boolean {
    return proto3.util.equals(StreamEndpoint, a, b);
  }
}

/**
 * @generated from message cuda_learning.GetStreamConfigRequest
 */
export class GetStreamConfigRequest extends Message<GetStreamConfigRequest> {
  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 1 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<GetStreamConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.GetStreamConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStreamConfigRequest {
    return new GetStreamConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStreamConfigRequest {
    return new GetStreamConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStreamConfigRequest {
    return new GetStreamConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStreamConfigRequest | PlainMessage<GetStreamConfigRequest> | undefined, b: GetStreamConfigRequest | PlainMessage<GetStreamConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetStreamConfigRequest, a, b);
  }
}

/**
 * @generated from message cuda_learning.GetStreamConfigResponse
 */
export class GetStreamConfigResponse extends Message<GetStreamConfigResponse> {
  /**
   * @generated from field: repeated cuda_learning.StreamEndpoint endpoints = 1;
   */
  endpoints: StreamEndpoint[] = [];

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 3 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<GetStreamConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.GetStreamConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoints", kind: "message", T: StreamEndpoint, repeated: true },
    { no: 3, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStreamConfigResponse {
    return new GetStreamConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStreamConfigResponse {
    return new GetStreamConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStreamConfigResponse {
    return new GetStreamConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStreamConfigResponse | PlainMessage<GetStreamConfigResponse> | undefined, b: GetStreamConfigResponse | PlainMessage<GetStreamConfigResponse> | undefined): boolean {
    return proto3.util.equals(GetStreamConfigResponse, a, b);
  }
}

/**
 * Feature flags synchronization
 *
 * @generated from message cuda_learning.SyncFeatureFlagsRequest
 */
export class SyncFeatureFlagsRequest extends Message<SyncFeatureFlagsRequest> {
  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 1 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<SyncFeatureFlagsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.SyncFeatureFlagsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncFeatureFlagsRequest {
    return new SyncFeatureFlagsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncFeatureFlagsRequest {
    return new SyncFeatureFlagsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncFeatureFlagsRequest {
    return new SyncFeatureFlagsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyncFeatureFlagsRequest | PlainMessage<SyncFeatureFlagsRequest> | undefined, b: SyncFeatureFlagsRequest | PlainMessage<SyncFeatureFlagsRequest> | undefined): boolean {
    return proto3.util.equals(SyncFeatureFlagsRequest, a, b);
  }
}

/**
 * @generated from message cuda_learning.SyncFeatureFlagsResponse
 */
export class SyncFeatureFlagsResponse extends Message<SyncFeatureFlagsResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 3 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<SyncFeatureFlagsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.SyncFeatureFlagsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncFeatureFlagsResponse {
    return new SyncFeatureFlagsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncFeatureFlagsResponse {
    return new SyncFeatureFlagsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncFeatureFlagsResponse {
    return new SyncFeatureFlagsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyncFeatureFlagsResponse | PlainMessage<SyncFeatureFlagsResponse> | undefined, b: SyncFeatureFlagsResponse | PlainMessage<SyncFeatureFlagsResponse> | undefined): boolean {
    return proto3.util.equals(SyncFeatureFlagsResponse, a, b);
  }
}

/**
 * Input sources configuration
 *
 * @generated from message cuda_learning.InputSource
 */
export class InputSource extends Message<InputSource> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string display_name = 3 [json_name = "display_name"];
   */
  displayName = "";

  /**
   * @generated from field: string type = 5;
   */
  type = "";

  /**
   * @generated from field: string image_path = 7 [json_name = "image_path"];
   */
  imagePath = "";

  /**
   * @generated from field: bool is_default = 9 [json_name = "is_default"];
   */
  isDefault = false;

  constructor(data?: PartialMessage<InputSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.InputSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display_name", jsonName: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "image_path", jsonName: "image_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "is_default", jsonName: "is_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InputSource {
    return new InputSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InputSource {
    return new InputSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InputSource {
    return new InputSource().fromJsonString(jsonString, options);
  }

  static equals(a: InputSource | PlainMessage<InputSource> | undefined, b: InputSource | PlainMessage<InputSource> | undefined): boolean {
    return proto3.util.equals(InputSource, a, b);
  }
}

/**
 * @generated from message cuda_learning.ListInputsRequest
 */
export class ListInputsRequest extends Message<ListInputsRequest> {
  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 1 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<ListInputsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.ListInputsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInputsRequest {
    return new ListInputsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInputsRequest {
    return new ListInputsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInputsRequest {
    return new ListInputsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInputsRequest | PlainMessage<ListInputsRequest> | undefined, b: ListInputsRequest | PlainMessage<ListInputsRequest> | undefined): boolean {
    return proto3.util.equals(ListInputsRequest, a, b);
  }
}

/**
 * @generated from message cuda_learning.ListInputsResponse
 */
export class ListInputsResponse extends Message<ListInputsResponse> {
  /**
   * @generated from field: repeated cuda_learning.InputSource sources = 1;
   */
  sources: InputSource[] = [];

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 3 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<ListInputsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.ListInputsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sources", kind: "message", T: InputSource, repeated: true },
    { no: 3, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInputsResponse {
    return new ListInputsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInputsResponse {
    return new ListInputsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInputsResponse {
    return new ListInputsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListInputsResponse | PlainMessage<ListInputsResponse> | undefined, b: ListInputsResponse | PlainMessage<ListInputsResponse> | undefined): boolean {
    return proto3.util.equals(ListInputsResponse, a, b);
  }
}

/**
 * Processor management
 *
 * @generated from message cuda_learning.GetProcessorStatusRequest
 */
export class GetProcessorStatusRequest extends Message<GetProcessorStatusRequest> {
  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 1 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<GetProcessorStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.GetProcessorStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProcessorStatusRequest {
    return new GetProcessorStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProcessorStatusRequest {
    return new GetProcessorStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProcessorStatusRequest {
    return new GetProcessorStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProcessorStatusRequest | PlainMessage<GetProcessorStatusRequest> | undefined, b: GetProcessorStatusRequest | PlainMessage<GetProcessorStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetProcessorStatusRequest, a, b);
  }
}

/**
 * @generated from message cuda_learning.GetProcessorStatusResponse
 */
export class GetProcessorStatusResponse extends Message<GetProcessorStatusResponse> {
  /**
   * @generated from field: string current_library = 1 [json_name = "current_library"];
   */
  currentLibrary = "";

  /**
   * @generated from field: string api_version = 3 [json_name = "api_version"];
   */
  apiVersion = "";

  /**
   * @generated from field: cuda_learning.LibraryCapabilities capabilities = 5;
   */
  capabilities?: LibraryCapabilities;

  /**
   * @generated from field: repeated string available_libraries = 7 [json_name = "available_libraries"];
   */
  availableLibraries: string[] = [];

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 9 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<GetProcessorStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.GetProcessorStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_library", jsonName: "current_library", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "api_version", jsonName: "api_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "capabilities", kind: "message", T: LibraryCapabilities },
    { no: 7, name: "available_libraries", jsonName: "available_libraries", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProcessorStatusResponse {
    return new GetProcessorStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProcessorStatusResponse {
    return new GetProcessorStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProcessorStatusResponse {
    return new GetProcessorStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProcessorStatusResponse | PlainMessage<GetProcessorStatusResponse> | undefined, b: GetProcessorStatusResponse | PlainMessage<GetProcessorStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetProcessorStatusResponse, a, b);
  }
}

/**
 * @generated from message cuda_learning.ReloadProcessorRequest
 */
export class ReloadProcessorRequest extends Message<ReloadProcessorRequest> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 3 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<ReloadProcessorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.ReloadProcessorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReloadProcessorRequest {
    return new ReloadProcessorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReloadProcessorRequest {
    return new ReloadProcessorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReloadProcessorRequest {
    return new ReloadProcessorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReloadProcessorRequest | PlainMessage<ReloadProcessorRequest> | undefined, b: ReloadProcessorRequest | PlainMessage<ReloadProcessorRequest> | undefined): boolean {
    return proto3.util.equals(ReloadProcessorRequest, a, b);
  }
}

/**
 * @generated from message cuda_learning.ReloadProcessorResponse
 */
export class ReloadProcessorResponse extends Message<ReloadProcessorResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 5 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<ReloadProcessorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.ReloadProcessorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReloadProcessorResponse {
    return new ReloadProcessorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReloadProcessorResponse {
    return new ReloadProcessorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReloadProcessorResponse {
    return new ReloadProcessorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReloadProcessorResponse | PlainMessage<ReloadProcessorResponse> | undefined, b: ReloadProcessorResponse | PlainMessage<ReloadProcessorResponse> | undefined): boolean {
    return proto3.util.equals(ReloadProcessorResponse, a, b);
  }
}

/**
 * Tools configuration
 *
 * @generated from message cuda_learning.Tool
 */
export class Tool extends Message<Tool> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string icon_path = 5 [json_name = "icon_path"];
   */
  iconPath = "";

  /**
   * @generated from field: string type = 7;
   */
  type = "";

  /**
   * @generated from field: string url = 9;
   */
  url = "";

  /**
   * @generated from field: string action = 11;
   */
  action = "";

  constructor(data?: PartialMessage<Tool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.Tool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "icon_path", jsonName: "icon_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tool {
    return new Tool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tool {
    return new Tool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tool {
    return new Tool().fromJsonString(jsonString, options);
  }

  static equals(a: Tool | PlainMessage<Tool> | undefined, b: Tool | PlainMessage<Tool> | undefined): boolean {
    return proto3.util.equals(Tool, a, b);
  }
}

/**
 * @generated from message cuda_learning.ToolCategory
 */
export class ToolCategory extends Message<ToolCategory> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: repeated cuda_learning.Tool tools = 5;
   */
  tools: Tool[] = [];

  constructor(data?: PartialMessage<ToolCategory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.ToolCategory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tools", kind: "message", T: Tool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToolCategory {
    return new ToolCategory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToolCategory {
    return new ToolCategory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToolCategory {
    return new ToolCategory().fromJsonString(jsonString, options);
  }

  static equals(a: ToolCategory | PlainMessage<ToolCategory> | undefined, b: ToolCategory | PlainMessage<ToolCategory> | undefined): boolean {
    return proto3.util.equals(ToolCategory, a, b);
  }
}

/**
 * @generated from message cuda_learning.GetAvailableToolsRequest
 */
export class GetAvailableToolsRequest extends Message<GetAvailableToolsRequest> {
  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 1 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<GetAvailableToolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.GetAvailableToolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAvailableToolsRequest {
    return new GetAvailableToolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAvailableToolsRequest {
    return new GetAvailableToolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAvailableToolsRequest {
    return new GetAvailableToolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAvailableToolsRequest | PlainMessage<GetAvailableToolsRequest> | undefined, b: GetAvailableToolsRequest | PlainMessage<GetAvailableToolsRequest> | undefined): boolean {
    return proto3.util.equals(GetAvailableToolsRequest, a, b);
  }
}

/**
 * @generated from message cuda_learning.GetAvailableToolsResponse
 */
export class GetAvailableToolsResponse extends Message<GetAvailableToolsResponse> {
  /**
   * @generated from field: repeated cuda_learning.ToolCategory categories = 1;
   */
  categories: ToolCategory[] = [];

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 3 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<GetAvailableToolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.GetAvailableToolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categories", kind: "message", T: ToolCategory, repeated: true },
    { no: 3, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAvailableToolsResponse {
    return new GetAvailableToolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAvailableToolsResponse {
    return new GetAvailableToolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAvailableToolsResponse {
    return new GetAvailableToolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAvailableToolsResponse | PlainMessage<GetAvailableToolsResponse> | undefined, b: GetAvailableToolsResponse | PlainMessage<GetAvailableToolsResponse> | undefined): boolean {
    return proto3.util.equals(GetAvailableToolsResponse, a, b);
  }
}

