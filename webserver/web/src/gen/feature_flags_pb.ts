// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file feature_flags.proto (package cuda_learning, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { TraceContext } from "./common_pb.js";

/**
 * @generated from message cuda_learning.FeatureFlag
 */
export class FeatureFlag extends Message<FeatureFlag> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  /**
   * @generated from field: string type = 5;
   */
  type = "";

  constructor(data?: PartialMessage<FeatureFlag>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.FeatureFlag";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeatureFlag {
    return new FeatureFlag().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeatureFlag {
    return new FeatureFlag().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeatureFlag {
    return new FeatureFlag().fromJsonString(jsonString, options);
  }

  static equals(a: FeatureFlag | PlainMessage<FeatureFlag> | undefined, b: FeatureFlag | PlainMessage<FeatureFlag> | undefined): boolean {
    return proto3.util.equals(FeatureFlag, a, b);
  }
}

/**
 * @generated from message cuda_learning.GetFeatureFlagsRequest
 */
export class GetFeatureFlagsRequest extends Message<GetFeatureFlagsRequest> {
  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 1 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<GetFeatureFlagsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.GetFeatureFlagsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureFlagsRequest {
    return new GetFeatureFlagsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureFlagsRequest {
    return new GetFeatureFlagsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureFlagsRequest {
    return new GetFeatureFlagsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureFlagsRequest | PlainMessage<GetFeatureFlagsRequest> | undefined, b: GetFeatureFlagsRequest | PlainMessage<GetFeatureFlagsRequest> | undefined): boolean {
    return proto3.util.equals(GetFeatureFlagsRequest, a, b);
  }
}

/**
 * @generated from message cuda_learning.GetFeatureFlagsResponse
 */
export class GetFeatureFlagsResponse extends Message<GetFeatureFlagsResponse> {
  /**
   * @generated from field: repeated cuda_learning.FeatureFlag flags = 1;
   */
  flags: FeatureFlag[] = [];

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 3 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<GetFeatureFlagsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.GetFeatureFlagsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "flags", kind: "message", T: FeatureFlag, repeated: true },
    { no: 3, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeatureFlagsResponse {
    return new GetFeatureFlagsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeatureFlagsResponse {
    return new GetFeatureFlagsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeatureFlagsResponse {
    return new GetFeatureFlagsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeatureFlagsResponse | PlainMessage<GetFeatureFlagsResponse> | undefined, b: GetFeatureFlagsResponse | PlainMessage<GetFeatureFlagsResponse> | undefined): boolean {
    return proto3.util.equals(GetFeatureFlagsResponse, a, b);
  }
}

