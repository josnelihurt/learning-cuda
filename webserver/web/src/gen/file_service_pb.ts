// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file file_service.proto (package cuda_learning, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { StaticImage, TraceContext } from "./common_pb.js";

/**
 * @generated from message cuda_learning.UploadImageRequest
 */
export class UploadImageRequest extends Message<UploadImageRequest> {
  /**
   * @generated from field: bytes file_data = 1 [json_name = "file_data"];
   */
  fileData = new Uint8Array(0);

  /**
   * @generated from field: string filename = 3;
   */
  filename = "";

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 5 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<UploadImageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.UploadImageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_data", jsonName: "file_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadImageRequest {
    return new UploadImageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadImageRequest {
    return new UploadImageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadImageRequest {
    return new UploadImageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadImageRequest | PlainMessage<UploadImageRequest> | undefined, b: UploadImageRequest | PlainMessage<UploadImageRequest> | undefined): boolean {
    return proto3.util.equals(UploadImageRequest, a, b);
  }
}

/**
 * @generated from message cuda_learning.UploadImageResponse
 */
export class UploadImageResponse extends Message<UploadImageResponse> {
  /**
   * @generated from field: cuda_learning.StaticImage image = 1;
   */
  image?: StaticImage;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 5 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<UploadImageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.UploadImageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "message", T: StaticImage },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadImageResponse {
    return new UploadImageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadImageResponse {
    return new UploadImageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadImageResponse {
    return new UploadImageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadImageResponse | PlainMessage<UploadImageResponse> | undefined, b: UploadImageResponse | PlainMessage<UploadImageResponse> | undefined): boolean {
    return proto3.util.equals(UploadImageResponse, a, b);
  }
}

