// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file image_processing.proto (package cuda_learning, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Enum for filter types
 *
 * @generated from enum cuda_learning.FilterType
 */
export enum FilterType {
  /**
   * @generated from enum value: FILTER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FILTER_TYPE_NONE = 1;
   */
  NONE = 1,

  /**
   * Future: FILTER_TYPE_BLUR = 5, FILTER_TYPE_EDGE_DETECT = 10, etc.
   *
   * @generated from enum value: FILTER_TYPE_GRAYSCALE = 2;
   */
  GRAYSCALE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(FilterType)
proto3.util.setEnumType(FilterType, "cuda_learning.FilterType", [
  { no: 0, name: "FILTER_TYPE_UNSPECIFIED" },
  { no: 1, name: "FILTER_TYPE_NONE" },
  { no: 2, name: "FILTER_TYPE_GRAYSCALE" },
]);

/**
 * Enum for accelerator types
 *
 * @generated from enum cuda_learning.AcceleratorType
 */
export enum AcceleratorType {
  /**
   * @generated from enum value: ACCELERATOR_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACCELERATOR_TYPE_GPU = 1;
   */
  GPU = 1,

  /**
   * @generated from enum value: ACCELERATOR_TYPE_CPU = 2;
   */
  CPU = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AcceleratorType)
proto3.util.setEnumType(AcceleratorType, "cuda_learning.AcceleratorType", [
  { no: 0, name: "ACCELERATOR_TYPE_UNSPECIFIED" },
  { no: 1, name: "ACCELERATOR_TYPE_GPU" },
  { no: 2, name: "ACCELERATOR_TYPE_CPU" },
]);

/**
 * Enum for grayscale conversion algorithms
 *
 * @generated from enum cuda_learning.GrayscaleType
 */
export enum GrayscaleType {
  /**
   * @generated from enum value: GRAYSCALE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ITU-R BT.601 (SDTV): Y = 0.299R + 0.587G + 0.114B
   *
   * @generated from enum value: GRAYSCALE_TYPE_BT601 = 1;
   */
  BT601 = 1,

  /**
   * ITU-R BT.709 (HDTV): Y = 0.2126R + 0.7152G + 0.0722B
   *
   * @generated from enum value: GRAYSCALE_TYPE_BT709 = 2;
   */
  BT709 = 2,

  /**
   * Simple average: Y = (R + G + B) / 3
   *
   * @generated from enum value: GRAYSCALE_TYPE_AVERAGE = 3;
   */
  AVERAGE = 3,

  /**
   * Lightness: Y = (max(R,G,B) + min(R,G,B)) / 2
   *
   * @generated from enum value: GRAYSCALE_TYPE_LIGHTNESS = 4;
   */
  LIGHTNESS = 4,

  /**
   * Luminosity: Y = 0.21R + 0.72G + 0.07B (similar to BT709)
   *
   * @generated from enum value: GRAYSCALE_TYPE_LUMINOSITY = 5;
   */
  LUMINOSITY = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(GrayscaleType)
proto3.util.setEnumType(GrayscaleType, "cuda_learning.GrayscaleType", [
  { no: 0, name: "GRAYSCALE_TYPE_UNSPECIFIED" },
  { no: 1, name: "GRAYSCALE_TYPE_BT601" },
  { no: 2, name: "GRAYSCALE_TYPE_BT709" },
  { no: 3, name: "GRAYSCALE_TYPE_AVERAGE" },
  { no: 4, name: "GRAYSCALE_TYPE_LIGHTNESS" },
  { no: 5, name: "GRAYSCALE_TYPE_LUMINOSITY" },
]);

/**
 * Request: Go passes raw image buffer
 *
 * @generated from message cuda_learning.ProcessImageRequest
 */
export class ProcessImageRequest extends Message<ProcessImageRequest> {
  /**
   * Raw pixel data (RGBA or agreed format)
   *
   * @generated from field: bytes image_data = 1 [json_name = "image_data"];
   */
  imageData = new Uint8Array(0);

  /**
   * @generated from field: int32 width = 3;
   */
  width = 0;

  /**
   * @generated from field: int32 height = 5;
   */
  height = 0;

  /**
   * 3=RGB, 4=RGBA
   *
   * @generated from field: int32 channels = 7;
   */
  channels = 0;

  /**
   * Array of filters to apply sequentially
   *
   * @generated from field: repeated cuda_learning.FilterType filters = 9;
   */
  filters: FilterType[] = [];

  /**
   * GPU or CPU processing
   *
   * @generated from field: cuda_learning.AcceleratorType accelerator = 11;
   */
  accelerator = AcceleratorType.UNSPECIFIED;

  /**
   * Grayscale algorithm selection
   *
   * @generated from field: cuda_learning.GrayscaleType grayscale_type = 13 [json_name = "grayscale_type"];
   */
  grayscaleType = GrayscaleType.UNSPECIFIED;

  /**
   * OpenTelemetry trace context propagation (deprecated - use trace_context instead)
   *
   * W3C trace-id (32 hex chars)
   *
   * @generated from field: string trace_id = 15 [json_name = "trace_id"];
   */
  traceId = "";

  /**
   * W3C span-id (16 hex chars)
   *
   * @generated from field: string span_id = 17 [json_name = "span_id"];
   */
  spanId = "";

  /**
   * W3C trace-flags (8 bit)
   *
   * @generated from field: uint32 trace_flags = 19 [json_name = "trace_flags"];
   */
  traceFlags = 0;

  /**
   * W3C Trace Context (unified for all layers)
   *
   * @generated from field: cuda_learning.TraceContext trace_context = 21 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<ProcessImageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.ProcessImageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image_data", jsonName: "image_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "width", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "height", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "channels", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "filters", kind: "enum", T: proto3.getEnumType(FilterType), repeated: true },
    { no: 11, name: "accelerator", kind: "enum", T: proto3.getEnumType(AcceleratorType) },
    { no: 13, name: "grayscale_type", jsonName: "grayscale_type", kind: "enum", T: proto3.getEnumType(GrayscaleType) },
    { no: 15, name: "trace_id", jsonName: "trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "span_id", jsonName: "span_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "trace_flags", jsonName: "trace_flags", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 21, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessImageRequest {
    return new ProcessImageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessImageRequest {
    return new ProcessImageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessImageRequest {
    return new ProcessImageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessImageRequest | PlainMessage<ProcessImageRequest> | undefined, b: ProcessImageRequest | PlainMessage<ProcessImageRequest> | undefined): boolean {
    return proto3.util.equals(ProcessImageRequest, a, b);
  }
}

/**
 * Response: C++ returns processed image buffer
 *
 * @generated from message cuda_learning.ProcessImageResponse
 */
export class ProcessImageResponse extends Message<ProcessImageResponse> {
  /**
   * 0=success, non-zero=error (gRPC style)
   *
   * @generated from field: int32 code = 1;
   */
  code = 0;

  /**
   * Status message or error description
   *
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * Processed pixel data
   *
   * @generated from field: bytes image_data = 5 [json_name = "image_data"];
   */
  imageData = new Uint8Array(0);

  /**
   * @generated from field: int32 width = 7;
   */
  width = 0;

  /**
   * @generated from field: int32 height = 9;
   */
  height = 0;

  /**
   * @generated from field: int32 channels = 11;
   */
  channels = 0;

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 13 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<ProcessImageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.ProcessImageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "image_data", jsonName: "image_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "width", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "height", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "channels", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessImageResponse {
    return new ProcessImageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessImageResponse {
    return new ProcessImageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessImageResponse {
    return new ProcessImageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessImageResponse | PlainMessage<ProcessImageResponse> | undefined, b: ProcessImageResponse | PlainMessage<ProcessImageResponse> | undefined): boolean {
    return proto3.util.equals(ProcessImageResponse, a, b);
  }
}

/**
 * Lifecycle management
 *
 * @generated from message cuda_learning.InitRequest
 */
export class InitRequest extends Message<InitRequest> {
  /**
   * Default 0
   *
   * @generated from field: int32 cuda_device_id = 1;
   */
  cudaDeviceId = 0;

  /**
   * Future: memory_pool_size = 5, enable_profiling = 10, etc.
   *
   * @generated from field: cuda_learning.TraceContext trace_context = 3 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<InitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.InitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cuda_device_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitRequest {
    return new InitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitRequest {
    return new InitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitRequest {
    return new InitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitRequest | PlainMessage<InitRequest> | undefined, b: InitRequest | PlainMessage<InitRequest> | undefined): boolean {
    return proto3.util.equals(InitRequest, a, b);
  }
}

/**
 * @generated from message cuda_learning.InitResponse
 */
export class InitResponse extends Message<InitResponse> {
  /**
   * 0=success, non-zero=error
   *
   * @generated from field: int32 code = 1;
   */
  code = 0;

  /**
   * Status or error message
   *
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 5 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<InitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.InitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitResponse {
    return new InitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitResponse {
    return new InitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitResponse {
    return new InitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InitResponse | PlainMessage<InitResponse> | undefined, b: InitResponse | PlainMessage<InitResponse> | undefined): boolean {
    return proto3.util.equals(InitResponse, a, b);
  }
}

/**
 * W3C Trace Context for distributed tracing
 *
 * @generated from message cuda_learning.TraceContext
 */
export class TraceContext extends Message<TraceContext> {
  /**
   * @generated from field: string traceparent = 1;
   */
  traceparent = "";

  /**
   * @generated from field: string tracestate = 3;
   */
  tracestate = "";

  constructor(data?: PartialMessage<TraceContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.TraceContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "traceparent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tracestate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TraceContext {
    return new TraceContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TraceContext {
    return new TraceContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TraceContext {
    return new TraceContext().fromJsonString(jsonString, options);
  }

  static equals(a: TraceContext | PlainMessage<TraceContext> | undefined, b: TraceContext | PlainMessage<TraceContext> | undefined): boolean {
    return proto3.util.equals(TraceContext, a, b);
  }
}

/**
 * WebSocket stream messages
 *
 * @generated from message cuda_learning.WebSocketFrameRequest
 */
export class WebSocketFrameRequest extends Message<WebSocketFrameRequest> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: cuda_learning.ProcessImageRequest request = 3;
   */
  request?: ProcessImageRequest;

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 5 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<WebSocketFrameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.WebSocketFrameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "request", kind: "message", T: ProcessImageRequest },
    { no: 5, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebSocketFrameRequest {
    return new WebSocketFrameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebSocketFrameRequest {
    return new WebSocketFrameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebSocketFrameRequest {
    return new WebSocketFrameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WebSocketFrameRequest | PlainMessage<WebSocketFrameRequest> | undefined, b: WebSocketFrameRequest | PlainMessage<WebSocketFrameRequest> | undefined): boolean {
    return proto3.util.equals(WebSocketFrameRequest, a, b);
  }
}

/**
 * @generated from message cuda_learning.WebSocketFrameResponse
 */
export class WebSocketFrameResponse extends Message<WebSocketFrameResponse> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: bool success = 3;
   */
  success = false;

  /**
   * @generated from field: string error = 5;
   */
  error = "";

  /**
   * @generated from field: cuda_learning.ProcessImageResponse response = 7;
   */
  response?: ProcessImageResponse;

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 9 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<WebSocketFrameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.WebSocketFrameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "response", kind: "message", T: ProcessImageResponse },
    { no: 9, name: "trace_context", jsonName: "trace_context", kind: "message", T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebSocketFrameResponse {
    return new WebSocketFrameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebSocketFrameResponse {
    return new WebSocketFrameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebSocketFrameResponse {
    return new WebSocketFrameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WebSocketFrameResponse | PlainMessage<WebSocketFrameResponse> | undefined, b: WebSocketFrameResponse | PlainMessage<WebSocketFrameResponse> | undefined): boolean {
    return proto3.util.equals(WebSocketFrameResponse, a, b);
  }
}

/**
 * Stream configuration
 *
 * @generated from message cuda_learning.StreamEndpoint
 */
export class StreamEndpoint extends Message<StreamEndpoint> {
  /**
   * "websocket" or "grpc"
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * "/ws" or ":50051"
   *
   * @generated from field: string endpoint = 3;
   */
  endpoint = "";

  /**
   * "json" or "binary"
   *
   * @generated from field: string transport_format = 5 [json_name = "transport_format"];
   */
  transportFormat = "";

  constructor(data?: PartialMessage<StreamEndpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.StreamEndpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "transport_format", jsonName: "transport_format", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamEndpoint {
    return new StreamEndpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamEndpoint {
    return new StreamEndpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamEndpoint {
    return new StreamEndpoint().fromJsonString(jsonString, options);
  }

  static equals(a: StreamEndpoint | PlainMessage<StreamEndpoint> | undefined, b: StreamEndpoint | PlainMessage<StreamEndpoint> | undefined): boolean {
    return proto3.util.equals(StreamEndpoint, a, b);
  }
}

/**
 * @generated from message cuda_learning.GetStreamConfigRequest
 */
export class GetStreamConfigRequest extends Message<GetStreamConfigRequest> {
  constructor(data?: PartialMessage<GetStreamConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.GetStreamConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStreamConfigRequest {
    return new GetStreamConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStreamConfigRequest {
    return new GetStreamConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStreamConfigRequest {
    return new GetStreamConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStreamConfigRequest | PlainMessage<GetStreamConfigRequest> | undefined, b: GetStreamConfigRequest | PlainMessage<GetStreamConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetStreamConfigRequest, a, b);
  }
}

/**
 * @generated from message cuda_learning.GetStreamConfigResponse
 */
export class GetStreamConfigResponse extends Message<GetStreamConfigResponse> {
  /**
   * @generated from field: repeated cuda_learning.StreamEndpoint endpoints = 1;
   */
  endpoints: StreamEndpoint[] = [];

  constructor(data?: PartialMessage<GetStreamConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cuda_learning.GetStreamConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoints", kind: "message", T: StreamEndpoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStreamConfigResponse {
    return new GetStreamConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStreamConfigResponse {
    return new GetStreamConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStreamConfigResponse {
    return new GetStreamConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStreamConfigResponse | PlainMessage<GetStreamConfigResponse> | undefined, b: GetStreamConfigResponse | PlainMessage<GetStreamConfigResponse> | undefined): boolean {
    return proto3.util.equals(GetStreamConfigResponse, a, b);
  }
}

