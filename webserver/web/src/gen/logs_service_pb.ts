// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file logs_service.proto (package cuda_learning, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import { KeyValue, TraceContext } from './common_pb.js';

/**
 * @generated from message cuda_learning.LogRecord
 */
export class LogRecord extends Message<LogRecord> {
  /**
   * @generated from field: int64 timestamp_unix_nano = 1 [json_name = "timestamp_unix_nano"];
   */
  timestampUnixNano = protoInt64.zero;

  /**
   * @generated from field: string severity_text = 3 [json_name = "severity_text"];
   */
  severityText = '';

  /**
   * @generated from field: int32 severity_number = 5 [json_name = "severity_number"];
   */
  severityNumber = 0;

  /**
   * @generated from field: string body = 7;
   */
  body = '';

  /**
   * @generated from field: repeated cuda_learning.KeyValue attributes = 9;
   */
  attributes: KeyValue[] = [];

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 11 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<LogRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cuda_learning.LogRecord';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'timestamp_unix_nano',
      jsonName: 'timestamp_unix_nano',
      kind: 'scalar',
      T: 3 /* ScalarType.INT64 */,
    },
    {
      no: 3,
      name: 'severity_text',
      jsonName: 'severity_text',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 5,
      name: 'severity_number',
      jsonName: 'severity_number',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
    { no: 7, name: 'body', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 9, name: 'attributes', kind: 'message', T: KeyValue, repeated: true },
    { no: 11, name: 'trace_context', jsonName: 'trace_context', kind: 'message', T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogRecord {
    return new LogRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogRecord {
    return new LogRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogRecord {
    return new LogRecord().fromJsonString(jsonString, options);
  }

  static equals(
    a: LogRecord | PlainMessage<LogRecord> | undefined,
    b: LogRecord | PlainMessage<LogRecord> | undefined
  ): boolean {
    return proto3.util.equals(LogRecord, a, b);
  }
}

/**
 * @generated from message cuda_learning.ExportLogsRequest
 */
export class ExportLogsRequest extends Message<ExportLogsRequest> {
  /**
   * @generated from field: repeated cuda_learning.LogRecord logs = 1;
   */
  logs: LogRecord[] = [];

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 3 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<ExportLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cuda_learning.ExportLogsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'logs', kind: 'message', T: LogRecord, repeated: true },
    { no: 3, name: 'trace_context', jsonName: 'trace_context', kind: 'message', T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportLogsRequest {
    return new ExportLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportLogsRequest {
    return new ExportLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportLogsRequest {
    return new ExportLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ExportLogsRequest | PlainMessage<ExportLogsRequest> | undefined,
    b: ExportLogsRequest | PlainMessage<ExportLogsRequest> | undefined
  ): boolean {
    return proto3.util.equals(ExportLogsRequest, a, b);
  }
}

/**
 * @generated from message cuda_learning.ExportLogsResponse
 */
export class ExportLogsResponse extends Message<ExportLogsResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = '';

  /**
   * @generated from field: cuda_learning.TraceContext trace_context = 3 [json_name = "trace_context"];
   */
  traceContext?: TraceContext;

  constructor(data?: PartialMessage<ExportLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'cuda_learning.ExportLogsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'message', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'trace_context', jsonName: 'trace_context', kind: 'message', T: TraceContext },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportLogsResponse {
    return new ExportLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportLogsResponse {
    return new ExportLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ExportLogsResponse {
    return new ExportLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ExportLogsResponse | PlainMessage<ExportLogsResponse> | undefined,
    b: ExportLogsResponse | PlainMessage<ExportLogsResponse> | undefined
  ): boolean {
    return proto3.util.equals(ExportLogsResponse, a, b);
  }
}
